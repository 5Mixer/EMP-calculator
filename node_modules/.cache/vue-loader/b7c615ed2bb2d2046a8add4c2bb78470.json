{"remainingRequest":"/usr/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/mixer/projects/emp/app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/mixer/projects/emp/app/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mixer/projects/emp/app/src/App.vue?vue&type=template&id=472cff63&","dependencies":[{"path":"/home/mixer/projects/emp/app/src/App.vue","mtime":1579967694783},{"path":"/home/mixer/projects/emp/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/mixer/projects/emp/app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mixer/projects/emp/app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}